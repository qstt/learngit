git学习笔记

1.在Windows上安装Git
	msysgit是Windows版的Git，从https://git-for-windows.github.io下载
	安装完成后，在开始菜单里找到“Git”->“Git Bash”
	
	安装完成后，还需要最后一步设置，在命令行输入：
	$ git config --global user.name "Your Name"            //Your Name   是自己使用的名字
    $ git config --global user.email "email@example.com"   //email@example.com   是自己使用的邮箱
	
2.创建版本库
	1）选择一个合适的地方，创建一个空目录：   //为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。
	$ mkdir learngit     
	2）第二步，通过git init命令把这个目录变成Git可以管理的仓库：
	$ git init
	
3.添加文件到Git仓库	
	$ git add readme.txt   //把文件提交到仓库   因为commit可以一次提交很多文件，所以你可以多次add不同的文件
	$ git commit -m "wrote a readme file"   //把文件提交到仓库
	
	$ git status   //查看仓库当前的状态
	$ git diff   //查看具体修改了什么内容
	
4.版本回退
	$ git log   //查看历史记录
	$ git reset --hard HEAD^   //回退到上一个版本
	$ git reset --hard HEAD~100   //回退当上100个版本
	$ git reflog   //记录每一次命令
	
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本
	
	$ gitk   //可以看到版本树
		如果用gitk显示的文件内容是乱码   可以执行下面的命令后   再次执行gitk
		$ git config --global gui.encoding utf-8
		
5.工作区和暂存区不是很明白

6.$ git diff HEAD -- readme.txt   //可以查看工作区和版本库里面最新版本的区别   readme.txt文本文档
  $ git diff    //是工作区(work dict)和暂存区(stage)的比较
  $ git diff --cached    //是暂存区(stage)和分支(master)的比较

7.撤销修改
	$ git checkout -- readme.txt   
		//意思就是，把readme.txt文件在工作区的修改全部撤销,这里有两种情况：
		一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
		总之，就是让这个文件回到最近一次git commit或git add时的状态。
	$ git reset HEAD readme.txt   //可以把暂存区的修改撤销掉（unstage），重新放回工作区

8.删除文件
	$ git rm test.txt
	$ git commit -m "remove test.txt"

9.远程仓库
	$ git push origin master   //把本地master分支的最新修改推送至GitHub
	要关联一个远程库，使用命令$ git remote add origin git@github.com:michaelliao/learngit.git
	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

10.如何删除GitHub上面的仓库
	Setting —— 点击Delete this repository(在最下面) —— 在弹出的窗口中输入你要删除的仓库名字

11.从远程仓库克隆
	$ git clone https://github.com/qstt/learngit.git 或 $ git clone git@github.com:michaelliao/gitskills.git

12.分支管理
	1）创建与合并分支
		查看分支：git branch
		创建分支：git branch <name>
		切换分支：git checkout <name>
		创建+切换分支：git checkout -b <name>
		合并某分支到当前分支：git merge <name>
		删除分支：git branch -d <name>
		
		可以用git push origin :dev 删除远程分支dev，origin和:dev之间有空格
	
	2）解决冲突
		用带参数的git log也可以看到分支的合并情况：$ git log --graph --pretty=oneline --abbrev-commit 也可以用gitk

		git有个最佳实践，master是主分支，用来做正式发布版之后的保留历史，其他分支包括dev用来做正常开发，
		多个feature用来做某些特性功能，release用来做发布版历史，每次发布都是用release打包，hotfix用来做发布版之后的一些及时迭代修复bug的工作。


	3）多人协作
		因此，多人协作的工作模式通常是这样：
		首先，可以试图用git push origin branch-name推送自己的修改；
		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		如果合并有冲突，则解决冲突，并在本地提交；
		没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
		这就是多人协作的工作模式，一旦熟悉了，就非常简单。
		
		查看远程库信息，使用git remote -v；
		本地新建的分支如果不推送到远程，对其他人就是不可见的；
		从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
		在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
		建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
		从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
		
		
		先把GitHub上的仓库克隆下来，克隆下来的仓库只有master分支，需要自己在本地创建dev分支，然后从GitHub上拉去dev分支上的内容
		不要在dev分支上直接修改   在dev分支下的dev-sce分支上修改、提交但是不推送到GitHub上，然后切换到dev分支上，dev分支与dev-sce分支
		进行合并，然后将dev分支上的内容推送到GitHub上的dev分支中




